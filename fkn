[1mdiff --git a/src/Driver.cpp b/src/Driver.cpp[m
[1mindex 32b18ed..18274e5 100644[m
[1m--- a/src/Driver.cpp[m
[1m+++ b/src/Driver.cpp[m
[36m@@ -11,27 +11,33 @@[m [mDriver::Driver(int address)[m
     // setInterframeDelay(base::Time::fromMicroseconds(3500));[m
 }[m
 [m
[31m-template <typename T> T decodeRegister(int16_t value);[m
[32m+[m[32m// template <typename T> T decodeRegister(int16_t value);[m
 [m
[31m-template <> uint8_t decodeRegister(int16_t value)[m
[31m-{[m
[31m-    return value;[m
[31m-}[m
[32m+[m[32m// template <> uint8_t decodeRegister(int16_t value)[m
[32m+[m[32m// {[m
[32m+[m[32m//     return value;[m
[32m+[m[32m// }[m
 [m
[31m-template <> int16_t decodeRegister(int16_t value)[m
[31m-{[m
[31m-    return reinterpret_cast<int16_t&>(value);[m
[31m-}[m
[32m+[m[32m// template <> int16_t decodeRegister(int16_t value)[m
[32m+[m[32m// {[m
[32m+[m[32m//     return reinterpret_cast<int16_t&>(value);[m
[32m+[m[32m// }[m
 [m
[31m-template <> float decodeRegister(int16_t value)[m
[31m-{[m
[31m-    return static_cast<float>(decodeRegister<int16_t>(value));[m
[31m-}[m
[32m+[m[32m// template <> float decodeRegister(int16_t value)[m
[32m+[m[32m// {[m
[32m+[m[32m//     return static_cast<float>(decodeRegister<int16_t>(value));[m
[32m+[m[32m// }[m
[32m+[m
[32m+[m[32m// template <typename T> T Driver::readSingleRegister(int register_id)[m
[32m+[m[32m// {[m
[32m+[m[32m//     int16_t value = modbus::Master::readSingleRegister(m_address, false, register_id);[m
[32m+[m[32m//     return decodeRegister<T>(value);[m
[32m+[m[32m// }[m
 [m
[31m-template <typename T> T Driver::readSingleRegister(int register_id)[m
[32m+[m[32mint16_t Driver::readSingleRegister(int register_id)[m
 {[m
     int16_t value = modbus::Master::readSingleRegister(m_address, false, register_id);[m
[31m-    return decodeRegister<T>(value);[m
[32m+[m[32m    return value;[m
 }[m
 [m
 ProbeMeasurements Driver::getMeasurements()[m
[36m@@ -39,22 +45,51 @@[m [mProbeMeasurements Driver::getMeasurements()[m
     ProbeMeasurements measurements;[m
 [m
     measurements.time = base::Time::now();[m
[31m-    measurements.concentration =[m
[31m-        readSingleRegister<float>(R_DISSOLVED_OXIGEN_MG_L) / std::pow(10, 5);[m
[31m-    measurements.saturation = readSingleRegister<float>(R_DISSOLVED_OXIGEN_SAT) / 100;[m
[32m+[m[32m    measurements.oxygen_concentration =[m
[32m+[m[32m        readSingleRegister(R_DISSOLVED_OXIGEN_MG_L) / std::pow<float>(10, 8);[m
[32m+[m[32m    measurements.oxygen_saturation =[m
[32m+[m[32m        readSingleRegister(R_DISSOLVED_OXIGEN_SAT) / std::pow<float>(10, 4);[m
     measurements.temperature =[m
[31m-        base::Temperature::fromCelsius(readSingleRegister<float>(R_TEMPERATURE) / 100);[m
[31m-    measurements.ph = readSingleRegister<float>(R_PH) / 100;[m
[32m+[m[32m        base::Temperature::fromCelsius(readSingleRegister(R_TEMPERATURE) / 100);[m
[32m+[m[32m    measurements.pH = readSingleRegister(R_PH) / 100.0;[m
     measurements.conductivity =[m
[31m-        readSingleRegister<float>(R_CONDUCTIVITY) / std::pow(10, 10);[m
[31m-    measurements.salinity = readSingleRegister<float>(R_SALINITY) / 100;[m
[31m-    measurements.dissolved_solids = readSingleRegister<float>(R_DISSOLVED_SOLIDS) / 100;[m
[31m-    measurements.specific_gravity = readSingleRegister<float>(R_SPECIFIC_GRAVITY) / 100;[m
[31m-    measurements.ORP = readSingleRegister<float>(R_ORP) / std::pow(10, 3);[m
[31m-    measurements.turbity = readSingleRegister<float>(R_TURBITY);[m
[31m-    measurements.height = readSingleRegister<float>(R_HEIGHT);[m
[31m-    measurements.latitude = readSingleRegister<float>(R_LATITUDE) / 100;[m
[31m-    measurements.longitude = readSingleRegister<float>(R_LONGITUDE) / 100;[m
[32m+[m[32m        readSingleRegister(R_CONDUCTIVITY) / std::pow<float>(10, 10);[m
[32m+[m[32m    measurements.salinity = readSingleRegister(R_SALINITY) / 100.0;[m
[32m+[m[32m    measurements.dissolved_solids = readSingleRegister(R_DISSOLVED_SOLIDS) / std::pow<float>(10, 8);[m
[32m+[m[32m    measurements.specific_gravity = readSingleRegister(R_SPECIFIC_GRAVITY) / 100.0;[m
[32m+[m[32m    measurements.oxidation_reduction_potential =[m
[32m+[m[32m        readSingleRegister(R_ORP) / std::pow<float>(10, 3);[m
[32m+[m[32m    measurements.turbidity = readSingleRegister(R_TURBITY);[m
[32m+[m[32m    measurements.height = readSingleRegister(R_HEIGHT);[m
[32m+[m[32m    measurements.latitude = readSingleRegister(R_LATITUDE) / 100.0;[m
[32m+[m[32m    measurements.longitude = readSingleRegister(R_LONGITUDE) / 100.0;[m
 [m
     return measurements;[m
 }[m
[32m+[m
[32m+[m[32m// ProbeMeasurements Driver::getMeasurements()[m
[32m+[m[32m// {[m
[32m+[m[32m//     ProbeMeasurements measurements;[m
[32m+[m
[32m+[m[32m//     measurements.time = base::Time::now();[m
[32m+[m[32m//     measurements.oxygen_concentration =[m
[32m+[m[32m//         readSingleRegister<float>(R_DISSOLVED_OXIGEN_MG_L) / std::pow(10, 8);[m
[32m+[m[32m//     measurements.oxygen_saturation =[m
[32m+[m[32m//         readSingleRegister<float>(R_DISSOLVED_OXIGEN_SAT) / std::pow(10, 4);[m
[32m+[m[32m//     measurements.temperature =[m
[32m+[m[32m//         base::Temperature::fromCelsius(readSingleRegister<float>(R_TEMPERATURE) / 100);[m
[32m+[m[32m//     measurements.pH = readSingleRegister<float>(R_PH) / 100;[m
[32m+[m[32m//     measurements.conductivity =[m
[32m+[m[32m//         readSingleRegister<float>(R_CONDUCTIVITY) / std::pow(10, 10);[m
[32m+[m[32m//     measurements.salinity = readSingleRegister<float>(R_SALINITY) / 100;[m
[32m+[m[32m//     measurements.dissolved_solids = readSingleRegister<float>(R_DISSOLVED_SOLIDS) / std::pow(10, 8);[m
[32m+[m[32m//     measurements.specific_gravity = readSingleRegister<float>(R_SPECIFIC_GRAVITY) / 100;[m
[32m+[m[32m//     measurements.oxidation_reduction_potential =[m
[32m+[m[32m//         readSingleRegister<float>(R_ORP) / std::pow(10, 3);[m
[32m+[m[32m//     measurements.turbidity = readSingleRegister<float>(R_TURBITY);[m
[32m+[m[32m//     measurements.height = readSingleRegister<float>(R_HEIGHT);[m
[32m+[m[32m//     measurements.latitude = readSingleRegister<float>(R_LATITUDE) / 100;[m
[32m+[m[32m//     measurements.longitude = readSingleRegister<float>(R_LONGITUDE) / 100;[m
[32m+[m
[32m+[m[32m//     return measurements;[m
[32m+[m[32m// }[m
[1mdiff --git a/src/Driver.hpp b/src/Driver.hpp[m
[1mindex b147b76..a37b049 100644[m
[1m--- a/src/Driver.hpp[m
[1m+++ b/src/Driver.hpp[m
[36m@@ -30,8 +30,10 @@[m [mnamespace water_probe_acquanativa_ap3 {[m
 [m
         };[m
 [m
[31m-        template<typename T>[m
[31m-        T readSingleRegister(int register_id);[m
[32m+[m[32m        // template<typename T>[m
[32m+[m[32m        // T readSingleRegister(int register_id);[m
[32m+[m
[32m+[m[32m        int16_t readSingleRegister(int register_id);[m
 [m
     public:[m
         Driver(int address);[m
[1mdiff --git a/src/Main.cpp b/src/Main.cpp[m
[1mindex a40352e..c2566a1 100644[m
[1m--- a/src/Main.cpp[m
[1m+++ b/src/Main.cpp[m
[36m@@ -14,16 +14,16 @@[m [mint main(int argc, char** argv)[m
     auto measurings = driver.getMeasurements();[m
     std::cout << "Measures: \n"[m
               << "Time: " << measurings.time << "\n"[m
[31m-              << "DO:  " << measurings.concentration << " Kg/L\n"[m
[31m-              << "DO:  " << measurings.saturation << " %\n"[m
[32m+[m[32m              << "DO:  " << measurings.oxygen_concentration << " Kg/L\n"[m
[32m+[m[32m              << "DO:  " << measurings.oxygen_saturation << " %\n"[m
               << "Temperature:  " << measurings.temperature.getKelvin() << " K\n"[m
[31m-              << "pH: " << measurings.ph << "\n"[m
[32m+[m[32m              << "pH: " << measurings.pH << "\n"[m
               << "Conductivity: " << measurings.conductivity << " S/m\n"[m
               << "Salinity: " << measurings.salinity << " ppt\n"[m
               << "Dissolved solids: " << measurings.dissolved_solids << " ppm\n"[m
               << "Specific gravity: " << measurings.specific_gravity << "\n"[m
[31m-              << "ORP: " << measurings.ORP << " V\n"[m
[31m-              << "Turbity: " << measurings.turbity << " NTU\n"[m
[32m+[m[32m              << "ORP: " << measurings.oxidation_reduction_potential << " V\n"[m
[32m+[m[32m              << "Turbity: " << measurings.turbidity << " NTU\n"[m
               << "Height: " << measurings.height << " m\n"[m
               << "Latitude: " << measurings.latitude << " Â°\n"[m
               << "Longitude: " << measurings.longitude << " Â°\n";[m
[1mdiff --git a/src/ProbeMeasurements.hpp b/src/ProbeMeasurements.hpp[m
[1mindex 94cc661..1723ee9 100644[m
[1m--- a/src/ProbeMeasurements.hpp[m
[1m+++ b/src/ProbeMeasurements.hpp[m
[36m@@ -9,35 +9,35 @@[m [mnamespace water_probe_acquanativa_ap3 {[m
     struct ProbeMeasurements {[m
         base::Time time;[m
         [m
[31m-        /** Water dissolved oxygen concentration in Kg/L */[m
[31m-        float concentration = base::unknown<float>();[m
[32m+[m[32m        /** Water dissolved oxygen concentration in Kg/mÂ³ */[m
[32m+[m[32m        float oxygen_concentration = base::unknown<float>();[m
 [m
[31m-        /** Water dissolved oxygen % saturation */[m
[31m-        float saturation = base::unknown<float>();[m
[32m+[m[32m        /** Water dissolved oxygen % saturation e.g. 0.1 = 10% */[m
[32m+[m[32m        float oxygen_saturation = base::unknown<float>();[m
 [m
         /** Water temperature in K */[m
         base::Temperature temperature;[m
 [m
         /** Water pH */[m
[31m-        float ph = base::unknown<float>();[m
[32m+[m[32m        float pH = base::unknown<float>();[m
 [m
[31m-        /** Water conductivity in S/cm*/[m
[32m+[m[32m        /** Water conductivity in S/m*/[m
         float conductivity = base::unknown<float>();[m
 [m
         /** Water salinity in PSU */[m
         float salinity = base::unknown<float>();[m
 [m
[31m-        /** Water dissolved solids concentration in ppm */[m
[32m+[m[32m        /** Water dissolved solids concentration */[m
         float dissolved_solids = base::unknown<float>();[m
 [m
[31m-        /** Water oxidation reduction potencial in V */[m
[32m+[m[32m        /** Water specific gravity */[m
         float specific_gravity = base::unknown<float>();[m
 [m
[31m-        /** Water oxidation reduction potencial in V */[m
[31m-        float ORP = base::unknown<float>();[m
[32m+[m[32m        /** Oxidation reduction potential in V */[m
[32m+[m[32m        float oxidation_reduction_potential = base::unknown<float>();[m
 [m
[31m-        /** Water turbity in NTU */[m
[31m-        float turbity = base::unknown<float>();[m
[32m+[m[32m        /** Water turbidity in NTU */[m
[32m+[m[32m        float turbidity = base::unknown<float>();[m
 [m
         /** Sensor height in m */[m
         float height = base::unknown<float>();[m
[1mdiff --git a/test/test_Driver.cpp b/test/test_Driver.cpp[m
[1mindex 2067f3c..9ce8730 100644[m
[1m--- a/test/test_Driver.cpp[m
[1m+++ b/test/test_Driver.cpp[m
[36m@@ -1,5 +1,5 @@[m
[31m-#include <base/Temperature.hpp>[m
 #include <base/Float.hpp>[m
[32m+[m[32m#include <base/Temperature.hpp>[m
 #include <gtest/gtest.h>[m
 #include <iodrivers_base/FixtureGTest.hpp>[m
 #include <water_probe_acquanativa_ap3/Driver.hpp>[m
[36m@@ -9,48 +9,53 @@[m
 using namespace water_probe_acquanativa_ap3;[m
 [m
 struct DriverAddress : public Driver {[m
[31m-    DriverAddress() : Driver(57) {[m
[32m+[m[32m    DriverAddress()[m
[32m+[m[32m        : Driver(57)[m
[32m+[m[32m    {[m
     }[m
 };[m
 [m
 struct DriverTest : public testing::Test,[m
                     public iodrivers_base::Fixture<DriverAddress>,[m
[31m-                    public Helpers<DriverTest>  {[m
[32m+[m[32m                    public Helpers<DriverTest> {[m
     DriverTest()[m
[31m-        : Helpers<DriverTest>(*this) {[m
[32m+[m[32m        : Helpers<DriverTest>(*this)[m
[32m+[m[32m    {[m
     }[m
 };[m
 [m
[31m-[m
[31m-TEST_F(DriverTest, it_reads_and_converts_probe_parameters) {[m
[32m+[m[32mTEST_F(DriverTest, it_reads_and_converts_probe_parameters)[m
[32m+[m[32m{[m
     IODRIVERS_BASE_MOCK();[m
 [m
[31m-    EXPECT_MODBUS_READ(57, false, 0, { 756 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 1, { 85 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 2, { 200 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 3, { 646 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 4, { 156 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 5, { 126 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 6, { 1256 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 7, { 32 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 8, { 40 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 9, { 3 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 10, { 500 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 11, { 1 });[m
[31m-    EXPECT_MODBUS_READ(57, false, 12, { 76 });[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 0, {756});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 1, {85});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 2, {200});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 3, {646});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 4, {156});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 5, {126});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 6, {1256});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 7, {32});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 8, {40});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 9, {3});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 10, {500});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 11, {1});[m
[32m+[m[32m    EXPECT_MODBUS_READ(57, false, 12, {76});[m
 [m
     auto measurements = driver.getMeasurements();[m
[32m+[m[32m    // float a = 756 * std::pow(10, -8);[m
[32m+[m[32m    // auto b = measurements.oxygen_concentration;[m
 [m
[31m-    ASSERT_FLOAT_EQ(756 * std::pow(10, -5), measurements.concentration);[m
[31m-    ASSERT_FLOAT_EQ(85 * std::pow(10, -2), measurements.saturation);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(756 * std::pow(10, -8), measurements.oxygen_concentration);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(85 * std::pow(10, -4), measurements.oxygen_saturation);[m
     ASSERT_FLOAT_EQ(275.15, measurements.temperature.getKelvin());[m
[31m-    ASSERT_FLOAT_EQ(646 * std::pow(10, -2), measurements.ph);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(646 * std::pow(10, -2), measurements.pH);[m
     ASSERT_FLOAT_EQ(156 * std::pow(10, -10), measurements.conductivity);[m
     ASSERT_FLOAT_EQ(126 * std::pow(10, -2), measurements.salinity);[m
[31m-    ASSERT_FLOAT_EQ(12.56, measurements.dissolved_solids);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(1256 * std::pow(10, -8), measurements.dissolved_solids);[m
     ASSERT_FLOAT_EQ(32 * std::pow(10, -2), measurements.specific_gravity);[m
[31m-    ASSERT_FLOAT_EQ(40 * std::pow(10, -3), measurements.ORP);[m
[31m-    ASSERT_FLOAT_EQ(3, measurements.turbity);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(40 * std::pow(10, -3), measurements.oxidation_reduction_potential);[m
[32m+[m[32m    ASSERT_FLOAT_EQ(3, measurements.turbidity);[m
     ASSERT_FLOAT_EQ(500, measurements.height);[m
     ASSERT_FLOAT_EQ(1 * std::pow(10, -2), measurements.latitude);[m
     ASSERT_FLOAT_EQ(76 * std::pow(10, -2), measurements.longitude);[m
